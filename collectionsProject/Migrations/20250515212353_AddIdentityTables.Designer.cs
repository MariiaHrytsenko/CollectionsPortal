// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using collectionsProject.Models;

#nullable disable

namespace collectionsProject.Migrations
{
    [DbContext(typeof(DbFromExistingContext))]
    [Migration("20250515212353_AddIdentityTables")]
    partial class AddIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Idcategory")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDcategory");

                    b.Property<int>("Idcharacteristic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDcharacteristic");

                    b.HasKey("Idcategory", "Idcharacteristic");

                    b.HasIndex("Idcharacteristic");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.Chracteristic", b =>
                {
                    b.Property<int>("Idchracteristic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDchracteristic");

                    b.Property<int?>("Iditem")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDitem");

                    b.Property<string>("Value")
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("value");

                    b.HasKey("Idchracteristic");

                    b.HasIndex("Iditem");

                    b.ToTable("chracteristic", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.Comment", b =>
                {
                    b.Property<int>("Idcomment")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDcomment");

                    b.Property<string>("ContentComment")
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("contentComment");

                    b.Property<string>("Idcommentator")
                        .HasColumnType("TEXT")
                        .HasColumnName("IDcommentator");

                    b.Property<int?>("Iditem")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDitem");

                    b.HasKey("Idcomment");

                    b.HasIndex("Idcommentator");

                    b.HasIndex("Iditem");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.EfmigrationsLock", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("__EFMigrationsLock", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.Friend", b =>
                {
                    b.Property<int>("Idfriendship")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDfriendship");

                    b.Property<string>("Idreceiver")
                        .HasColumnType("TEXT")
                        .HasColumnName("IDreceiver");

                    b.Property<string>("Idrequester")
                        .HasColumnType("TEXT")
                        .HasColumnName("IDrequester");

                    b.HasKey("Idfriendship");

                    b.HasIndex("Idreceiver");

                    b.HasIndex("Idrequester");

                    b.ToTable("friends", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.Invitation", b =>
                {
                    b.Property<int>("Idinvitation")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDinvitation");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("createdDate");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("email");

                    b.Property<string>("Idinviter")
                        .HasColumnType("TEXT")
                        .HasColumnName("IDinviter");

                    b.Property<string>("Idrequester")
                        .HasColumnType("TEXT")
                        .HasColumnName("IDrequester");

                    b.Property<string>("Token")
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("token");

                    b.HasKey("Idinvitation");

                    b.HasIndex("Idinviter");

                    b.HasIndex("Idrequester");

                    b.ToTable("invitation", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.Item", b =>
                {
                    b.Property<int>("Iditem")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDitem");

                    b.Property<string>("NameItem")
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("nameItem");

                    b.Property<byte[]>("PhotoItem")
                        .HasColumnType("BLOB")
                        .HasColumnName("photoItem");

                    b.HasKey("Iditem");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.ModelCategory", b =>
                {
                    b.Property<int>("Idcategory")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDcategory");

                    b.Property<string>("Iduser")
                        .HasColumnType("TEXT")
                        .HasColumnName("IDuser");

                    b.Property<string>("NameCategory")
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("nameCategory");

                    b.HasKey("Idcategory");

                    b.HasIndex("Iduser");

                    b.ToTable("Model_category", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.ModelCharacteristic", b =>
                {
                    b.Property<int>("Idcharacteristic")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IDcharacteristic");

                    b.Property<string>("Iduser")
                        .HasColumnType("TEXT")
                        .HasColumnName("IDuser");

                    b.Property<string>("NameCharacteristic")
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("nameCharacteristic");

                    b.HasKey("Idcharacteristic");

                    b.HasIndex("Iduser");

                    b.ToTable("Model_characteristics", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.HasOne("collectionsProject.Models.ModelCategory", null)
                        .WithMany()
                        .HasForeignKey("Idcategory")
                        .IsRequired();

                    b.HasOne("collectionsProject.Models.ModelCharacteristic", null)
                        .WithMany()
                        .HasForeignKey("Idcharacteristic")
                        .IsRequired();
                });

            modelBuilder.Entity("collectionsProject.Models.Chracteristic", b =>
                {
                    b.HasOne("collectionsProject.Models.Item", "IditemNavigation")
                        .WithMany("Chracteristics")
                        .HasForeignKey("Iditem");

                    b.Navigation("IditemNavigation");
                });

            modelBuilder.Entity("collectionsProject.Models.Comment", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "IdcommentatorNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("Idcommentator");

                    b.HasOne("collectionsProject.Models.Item", "IditemNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("Iditem");

                    b.Navigation("IdcommentatorNavigation");

                    b.Navigation("IditemNavigation");
                });

            modelBuilder.Entity("collectionsProject.Models.Friend", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "IdreceiverNavigation")
                        .WithMany("FriendIdreceiverNavigations")
                        .HasForeignKey("Idreceiver");

                    b.HasOne("collectionsProject.Models.User", "IdrequesterNavigation")
                        .WithMany("FriendIdrequesterNavigations")
                        .HasForeignKey("Idrequester");

                    b.Navigation("IdreceiverNavigation");

                    b.Navigation("IdrequesterNavigation");
                });

            modelBuilder.Entity("collectionsProject.Models.Invitation", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "IdinviterNavigation")
                        .WithMany("InvitationIdinviterNavigations")
                        .HasForeignKey("Idinviter");

                    b.HasOne("collectionsProject.Models.User", "IdrequesterNavigation")
                        .WithMany("InvitationIdrequesterNavigations")
                        .HasForeignKey("Idrequester");

                    b.Navigation("IdinviterNavigation");

                    b.Navigation("IdrequesterNavigation");
                });

            modelBuilder.Entity("collectionsProject.Models.ModelCategory", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "IduserNavigation")
                        .WithMany("ModelCategories")
                        .HasForeignKey("Iduser");

                    b.Navigation("IduserNavigation");
                });

            modelBuilder.Entity("collectionsProject.Models.ModelCharacteristic", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "IduserNavigation")
                        .WithMany("ModelCharacteristics")
                        .HasForeignKey("Iduser");

                    b.Navigation("IduserNavigation");
                });

            modelBuilder.Entity("collectionsProject.Models.Item", b =>
                {
                    b.Navigation("Chracteristics");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("collectionsProject.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FriendIdreceiverNavigations");

                    b.Navigation("FriendIdrequesterNavigations");

                    b.Navigation("InvitationIdinviterNavigations");

                    b.Navigation("InvitationIdrequesterNavigations");

                    b.Navigation("ModelCategories");

                    b.Navigation("ModelCharacteristics");
                });
#pragma warning restore 612, 618
        }
    }
}
