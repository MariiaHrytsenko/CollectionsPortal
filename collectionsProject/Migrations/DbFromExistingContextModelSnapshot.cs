// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using collectionsProject.Models;

#nullable disable

namespace collectionsProject.Migrations
{
    [DbContext(typeof(DbFromExistingContext))]
    partial class DbFromExistingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Item", b =>
                {
                    b.Property<int>("Iditem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameItem")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PhotoItem")
                        .HasColumnType("BLOB");

                    b.HasKey("Iditem");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("category", b =>
                {
                    b.Property<int>("Idcategory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Idcharacteristic")
                        .HasColumnType("INTEGER");

                    b.HasKey("Idcategory", "Idcharacteristic");

                    b.HasIndex("Idcharacteristic");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("collectionsProject.Models.Characteristic", b =>
                {
                    b.Property<int>("Idchracteristic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Iditem")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Idchracteristic");

                    b.HasIndex("Iditem");

                    b.ToTable("Chracteristics");
                });

            modelBuilder.Entity("collectionsProject.Models.Comment", b =>
                {
                    b.Property<int>("IDcomment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDcommentator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IDitem")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDcomment");

                    b.HasIndex("IDcommentator");

                    b.HasIndex("IDitem");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("collectionsProject.Models.EfmigrationsLock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EfmigrationsLocks");
                });

            modelBuilder.Entity("collectionsProject.Models.Friend", b =>
                {
                    b.Property<int>("IDfriendship")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IDreceiver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IDrequester")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDfriendship");

                    b.HasIndex("IDreceiver");

                    b.HasIndex("IDrequester");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("collectionsProject.Models.Invitation", b =>
                {
                    b.Property<int>("IDinvitation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IDinviter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IDrequester")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IDinvitation");

                    b.HasIndex("IDinviter");

                    b.HasIndex("IDrequester");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("collectionsProject.Models.ModelCategory", b =>
                {
                    b.Property<int>("Idcategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameCategory")
                        .HasColumnType("TEXT");

                    b.HasKey("Idcategory");

                    b.HasIndex("Id");

                    b.ToTable("ModelCategories");
                });

            modelBuilder.Entity("collectionsProject.Models.ModelCharacteristic", b =>
                {
                    b.Property<int>("Idcharacteristic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameCharacteristic")
                        .HasColumnType("TEXT");

                    b.HasKey("Idcharacteristic");

                    b.HasIndex("Id");

                    b.ToTable("ModelCharacteristics");
                });

            modelBuilder.Entity("collectionsProject.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.HasOne("collectionsProject.Models.ModelCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("collectionsProject.Models.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("category", b =>
                {
                    b.HasOne("collectionsProject.Models.ModelCategory", null)
                        .WithMany()
                        .HasForeignKey("Idcategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("collectionsProject.Models.ModelCharacteristic", null)
                        .WithMany()
                        .HasForeignKey("Idcharacteristic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("collectionsProject.Models.Characteristic", b =>
                {
                    b.HasOne("Item", "IditemNavigation")
                        .WithMany("Chracteristics")
                        .HasForeignKey("Iditem")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IditemNavigation");
                });

            modelBuilder.Entity("collectionsProject.Models.Comment", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "Commentator")
                        .WithMany("Comments")
                        .HasForeignKey("IDcommentator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Item", "Item")
                        .WithMany("Comments")
                        .HasForeignKey("IDitem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commentator");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("collectionsProject.Models.Friend", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "Receiver")
                        .WithMany("FriendsReceived")
                        .HasForeignKey("IDreceiver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("collectionsProject.Models.User", "Requester")
                        .WithMany("FriendsRequested")
                        .HasForeignKey("IDrequester")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("collectionsProject.Models.Invitation", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "Inviter")
                        .WithMany("InvitationsSent")
                        .HasForeignKey("IDinviter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("collectionsProject.Models.User", "Requester")
                        .WithMany("InvitationsReceived")
                        .HasForeignKey("IDrequester")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inviter");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("collectionsProject.Models.ModelCategory", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "IdNavigation")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("collectionsProject.Models.ModelCharacteristic", b =>
                {
                    b.HasOne("collectionsProject.Models.User", "IdNavigation")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Navigation("Chracteristics");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("collectionsProject.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FriendsReceived");

                    b.Navigation("FriendsRequested");

                    b.Navigation("InvitationsReceived");

                    b.Navigation("InvitationsSent");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
